name: Deploy (FE & BE) By Building Directly on Server

on:
  workflow_dispatch:
  push:
    branches: 
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Transfer updated code to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "src/*"
          target: "/root/myproject"  # this will create src/* inside /root/myproject

      - name: Check what is modified
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'src/backend/**'
            frontend:
              - 'src/frontend/**'
            devops:
              - 'src/devops/**'
            pipeline:
              - '.github/workflows/pipeline.yml'
          base: ${{ github.event.before }}

      - name: Restart Backend (If src/backend OR src/devops OR pipeline is modified)
        if: steps.changes.outputs.backend == 'true' || steps.changes.outputs.devops == 'true' || steps.changes.outputs.pipeline == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          script: |
            cd /root/myproject/src/devops/
            touch /root/myproject/src/devops/.env
            echo "${{ secrets.ENV_FILE_CONTENT }}" > /root/myproject/src/devops/.env
            docker compose up -d --build --force-recreate --no-deps backend
            for i in {1..10}; do docker system prune -af && break || sleep 2; done

      - name: Restart Frontend (If src/frontend OR src/devops OR pipeline is modified)
        if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.devops == 'true' || steps.changes.outputs.pipeline == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          command_timeout: 30m
          script: |
            cd /root/myproject/src/devops/
            touch /root/myproject/src/devops/.env
            echo "${{ secrets.ENV_FILE_CONTENT }}" > /root/myproject/src/devops/.env

            # If bulding with arguments then dont forget to pass these in Dockerfile as well.
            docker compose build --build-arg ARG1='${{ secrets.ARG1_VALUE }}' --build-arg ARG2='${{ secrets.ARG2_VALUE }}' frontend
            docker compose up -d --force-recreate --no-deps frontend
            for i in {1..10}; do docker image prune -af && break || sleep 4; done
