# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# Example showes dotnet app deployment - it can be any tech example python, this pipeline focuses on slot based deployment

name: Build and Deploy MyApp on Azure (Slot based blue-green deployment)

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  STAGING_SLOT_HEALTHCHECK_URL: https://myapp-staging.azurewebsites.net/health  # NOTE: Create a staging slot for your webapp from Azure portal
  PRODUCTION_SLOT_HEALTHCHECK_URL: https://myapp.azurewebsites.net/health       # This is the actual webapp url with healthcheck endpoint
  WEBAPP_NAME: myapp
  ENVIRONMENT_NAME: MyDotnetApp

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: Dotnet publish
        run: dotnet publish ./MyProject/MyProject.csproj -c Release -o /tmp/app

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: /tmp/app

  deploy-to-staging-slot:
    runs-on: ubuntu-latest
    needs: build
    environment: "Staging"
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App - ${{ env.ENVIRONMENT_NAME }} (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: "staging"
          publish-profile: ${{ secrets.AZURE_CREDENTIALS_WEBAPP_STAGING_SLOT }}
          package: .

  health-check-staging-slot:
    runs-on: ubuntu-latest
    needs: deploy-to-staging-slot
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Health Check
        run: |
          chmod +x Scripts/ShellScripts/health_check.sh
          Scripts/ShellScripts/health_check.sh ${{ env.STAGING_SLOT_HEALTHCHECK_URL }}

# Note: If the deployment failed in staging slot and the health check doesn't pass then it will break the pipeline over here, saving the production from going down
  deploy-to-production-slot:
    runs-on: ubuntu-latest
    needs: health-check-staging-slot
    environment: "Production"
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App - ${{ env.ENVIRONMENT_NAME }} (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          slot-name: "production"
          publish-profile: ${{ secrets.AZURE_CREDENTIALS_WEBAPP_PRODUCTION_SLOT }}
          package: .

  health-check-production-slot:
    runs-on: ubuntu-latest
    needs: deploy-to-production-slot
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Health Check
        run: |
          chmod +x Scripts/ShellScripts/health_check.sh
          if Scripts/ShellScripts/health_check.sh ${{ env.PRODUCTION_SLOT_HEALTHCHECK_URL }}; then
            curl -H "Content-Type: application/json" -d '{"text": "${{ env.ENVIRONMENT_NAME }} : Deployment Successful"}' ${{ secrets.TEAMS_CHANNEL_WEBHOOK_URL }}
          else
            # If health check is not successful
            curl -H "Content-Type: application/json" -d '{"text": "${{ env.ENVIRONMENT_NAME }} : Deployment Unsuccessful"}' ${{ secrets.TEAMS_CHANNEL_WEBHOOK_URL }}
          fi
